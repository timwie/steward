{% extends "base_dynamic.j2" %}

{# ============================= VARIABLES ============================= #}
{% block vars %}
    {{ super() }}

    {% set nb_sectors = top1_sector_millis | length %}

    {% set max_nb_sectors = 16 %}

    {% set sector_w = 320 / (max_nb_sectors + 2) %}
    {% set sector_h = 4.5 %}
    {% set sector_x_padding = 1 %}
    {% set sector_bottom_order_h = 0.5 %}

    {% set sector_label_w = sector_w - sector_x_padding*2 %}
    {% set sector_label_h = 3 %}

    {% set sector_div_w = 0.2 %}

    {% set color_bar_h = 1.5 %}

    {% set frame_w = (nb_sectors + 2) * sector_w %}
    {% set frame_h = color_bar_h + sector_h*2 + sector_label_h %}
    {% set frame_x_offset = -160 + (320 - frame_w) / 2.0 %}
    
{% endblock vars %}
{# ============================= MANIALINK ============================= #}
{% block manialink %}
{{ super() }}

<!-- Colored bar at the top indicates whether the run is on course to become a new PB -->
<frame z-index="101">
    <quad id="color_bar" pos="-160 90" size="320 {{color_bar_h}}" bgcolor="{{col_neutral}}" z-index="1"/>
    <quad size="320 0.2" pos="-160 {{90 - color_bar_h}}" bgcolor="{{col_neutral}}" opacity="0.1" valign="center"/>
</frame>

<frame pos="{{frame_x_offset}} {{90 - color_bar_h}}" z-index="100">
    <!-- Dividing lines -->
    {% for i in range(end=nb_sectors-1) %}
        <quad id="sector_div_{{i}}"
              size="{{sector_div_w}} {{sector_h * 2}}" pos="{{(i+2)*sector_w}} 0" halign="center" z-index="3"
              bgcolor="{{col_neutral}}" opacity="0.1"/>
    {% endfor %}

    <!-- Labels on the right -->
    <frame pos="{{frame_w - sector_w}} 0" z-index="1">
        <label id="map_name"
               pos="{{sector_x_padding}} {{sector_h * -0.5}}" valign="center"
               textcolor="{{col_white}}" textsize="2.5" textfont="{{font_text}}"/>
        <label id="map_author"
               pos="{{sector_x_padding}} {{sector_h * -1.5}}" valign="center"
               textcolor="{{col_white}}" textsize="1.5" textfont="{{font_text}}"/>
        <label id="map_record"
               pos="{{sector_x_padding}} {{sector_h * -2.5}}" valign="center"
               textcolor="{{col_white}}" textsize="2.5" textfont="{{font_text}}"/>
    </frame>

    <!-- Labels on the left -->
    <frame pos="{{sector_w - sector_x_padding}} 0" z-index="1">
        <label size="{{sector_label_w}} {{sector_label_h}}" pos="0 {{sector_h * -0.5}}"
               text="$sPB ± Top1" style="{{ font_bold_small }}" halign="right" valign="center"
               textcolor="{{col_white}}"/>
        <label size="{{sector_label_w}} {{sector_label_h}}" pos="0 {{sector_h * -1.5}}"
               text="$sLive ± Top1" style="{{ font_bold_small }}" halign="right" valign="center"
               textcolor="{{col_white}}"/>
    </frame>

    {% for idx in range(end=nb_sectors) %}
        <frame pos="{{sector_w*(idx+1)}} 0" z-index="1">
            <!-- Cell background colors indicate whether the live sector was better or worse than the PB sector time -->
            <quad id="pb_diff_bg_{{idx}}"
                  size="{{sector_w}} {{sector_h}}" pos="0 0" opacity="0.9"/>
            <quad id="live_diff_bg_{{idx}}"
                  size="{{sector_w}} {{sector_h}}" pos="0 -{{sector_h}}" opacity="0.8"/>

            <!-- Sector numbering "S1", "S2", etc on the bottom -->
            <label id="sector_label_{{idx}}"
                   pos="{{sector_w/2}} {{sector_h * -2 - sector_label_h * 0.5}}"
                   text="$sS{{idx+1}}" style="{{ font_bold_small }}" halign="center" valign="center"
                   textcolor="{{col_white}}"/>

            <frame pos="0 {{sector_h * -2}}">
                <quad id="sector_weight_{{idx}}"
                      size="{{sector_w}} 0"
                      valign="top" bgcolor="{{col_neutral}}" opacity="0.5"/>

                <quad id="sector_weight_border_{{idx}}"
                       size="{{sector_w}} {{sector_bottom_order_h}}" valign="top" bgcolor="{{col_neutral}}" opacity="0.9"/>
            </frame>

            <!-- The two diffs, one for PB vs Top1, one for Live vs Top1 -->
            <label id="pb_diff_text_{{idx}}"
                   size="{{sector_label_w}} {{sector_h}}" pos="{{sector_w/2}} {{sector_h * -0.5}}"
                   z-index="2" style="{{ font_bold_big }}" halign="center" valign="center"
                   textcolor="{{col_white}}"/>
            <label id="live_diff_text_{{idx}}"
                   size="{{sector_label_w}} {{sector_h}}" pos="{{sector_w/2}} {{sector_h * -1.5}}"
                   z-index="2" style="{{ font_bold_big }}" halign="center" valign="center"
                   textcolor="{{col_white}}"/>
        </frame>
    {% endfor %}
</frame>

{% endblock manialink %}
{# ============================= SCRIPT DECLARATIONS ============================= #}
{% block decl %}

#Include "ColorLib" as ColorLib
#Include "MathLib" as MathLib

#Const MAX_SECTOR_WEIGHT 3.0

declare Integer   G_PbMillis;         // this player's pb time
declare Integer[] G_PbSectorMillis;   // this player's pb sector times

declare Integer   G_Top1Millis;       // top1 record time
declare Integer[] G_Top1SectorMillis; // top1 record sector times

declare Integer   G_NbSectors;        // nb checkpoints + 1

declare Boolean   G_PbIsTop1;

declare Real[]    G_SectorWeights;


Text TimeToText(Integer MillisIn) {
    declare Integer Millis = MillisIn;
    declare Integer Secs = Millis / 1000;
    declare Integer Mins = Secs / 60;
    Millis = Millis % 1000;
    Secs = Secs % 60;

    declare Text MillisTxt = "" ^ Millis;
    if (Millis < 10) {
        MillisTxt = "0" ^ MillisTxt;
    }
    if (Millis < 100) {
        MillisTxt = "0" ^ MillisTxt;
    }

    declare Text SecsTxt = Secs ^ ".";
    if (Secs < 10) {
        SecsTxt = "0" ^ SecsTxt;
    }

    declare Text MinsTxt = "";
    if (Mins > 0) {
        MinsTxt = Mins ^ ":";
    }

    return MinsTxt ^ SecsTxt ^ MillisTxt;
}

/**
 * Build a textual difference between two times in milliseconds.
 * Will be "-x.xxx" if a < b, "+x.xxx" otherwise.
 */
Text Diff(Integer a, Integer b) {
    declare Integer DiffMillis = MathLib::Abs(a - b);
    declare Integer DiffSecs = DiffMillis / 1000;
    declare Integer DiffMins = DiffSecs / 60;
    DiffMillis = DiffMillis % 1000;
    DiffSecs = DiffSecs % 60;

    // use game convention: +0.000, not -0.000
    declare Text sign = "-";
    if (a <= b)  {
        sign = "+";
    }

    declare Text DiffMillisTxt = "" ^ DiffMillis;
    if (DiffMillis < 10) {
        DiffMillisTxt = "0" ^ DiffMillisTxt;
    }
    if (DiffMillis < 100) {
        DiffMillisTxt = "0" ^ DiffMillisTxt;
    }

    declare Text DiffSecsTxt = DiffSecs ^ ".";
    if (DiffMins > 0 && DiffSecs < 10) {
        DiffSecsTxt = "0" ^ DiffSecsTxt;
    }

    declare Text DiffMinsTxt = "";
    if (DiffMins > 0) {
        DiffMinsTxt = DiffMins ^ ":";
    }

    return sign ^ DiffMinsTxt ^ DiffSecsTxt ^ DiffMillisTxt;
}

Void SetSectorColor(Integer SectorIdx, Text HexColor) {
    {% raw %}
    declare UI_PbDiffBg           = (Page.GetFirstChild("""pb_diff_bg_{{{SectorIdx}}}""") as CMlQuad);
    declare UI_LiveDiffBg         = (Page.GetFirstChild("""live_diff_bg_{{{SectorIdx}}}""") as CMlQuad);
    declare UI_SectorWeight       = (Page.GetFirstChild("""sector_weight_{{{SectorIdx}}}""") as CMlQuad);
    declare UI_SectorWeightBorder = (Page.GetFirstChild("""sector_weight_border_{{{SectorIdx}}}""") as CMlQuad);
    {% endraw %}

    declare RgbColor = ColorLib::HexToRgb(HexColor);
    UI_PbDiffBg.BgColor           = RgbColor;
    UI_LiveDiffBg.BgColor         = RgbColor;
    UI_SectorWeight.BgColor       = RgbColor;
    UI_SectorWeightBorder.BgColor = RgbColor;
}

/** Clear the row for live diffs, reset the colors, update the PB diff. */
Void OnReset() {
    // Recalculate PB diff in case a new PB or Top1 was set.
    for(i, 0, G_NbSectors - 1)
    {
        {% raw %}
        declare UI_PbDiffText = (Page.GetFirstChild("""pb_diff_text_{{{i}}}""") as CMlLabel);
        {% endraw %}

        if (G_PbIsTop1) {
            UI_PbDiffText.Value = "";
        } else {
            UI_PbDiffText.Value = "$s" ^ Diff(G_Top1SectorMillis[i], G_PbSectorMillis[i]);
        }
    }

    // Clear live diffs.
    for(i, 0, G_NbSectors - 1)
    {
        {% raw %}
        declare UI_LiveDiffText = (Page.GetFirstChild("""live_diff_text_{{{i}}}""") as CMlLabel);
        {% endraw %}

        SetSectorColor(i, "{{col_neutral}}");
        UI_LiveDiffText.Value = "";
    }

    // Reset the top bar color.
    declare UI_ColorBar = (Page.GetFirstChild("color_bar") as CMlQuad);
    UI_ColorBar.BgColor = ColorLib::HexToRgb("{{col_neutral}}");
}

Void SetSectorWeights() {
    declare Integer MinSectorMillis = 0;

    for(i, 0, G_NbSectors - 1) {
        if (i == 0 || G_Top1SectorMillis[i] < MinSectorMillis) {
            MinSectorMillis = G_Top1SectorMillis[i];
        }
    }

    for(i, 0, G_NbSectors - 1) {
        declare Millis = G_Top1SectorMillis[i] * 1.0;
        if (i == 0) {
             // first sector is elongated by slow start; add some offset
            Millis = MathLib::Max(0.0, Millis - 2000.0);
        }
        declare Weight = MathLib::Min(MAX_SECTOR_WEIGHT, Millis / MinSectorMillis);
        G_SectorWeights.add(Weight);
    }

    for(i, 0, G_NbSectors - 1) {
        {% raw %}
        declare UI_SectorLabel = (Page.GetFirstChild("""sector_label_{{{i}}}""") as CMlLabel);
        declare UI_SectorWeight = (Page.GetFirstChild("""sector_weight_{{{i}}}""") as CMlQuad);
        declare UI_SectorWeightBorder = (Page.GetFirstChild("""sector_weight_border_{{{i}}}""") as CMlQuad);
        declare UI_SectorDiv = (Page.GetFirstChild("""sector_div_{{{i}}}""") as CMlQuad);
        {% endraw %}

        declare WeightedHeight = G_SectorWeights[i]*{{sector_label_h}};

        UI_SectorLabel.TextSizeReal = 0.5 * G_SectorWeights[i];
        UI_SectorLabel.RelativePosition_V3.Y = {{sector_h * -2}} - WeightedHeight/2;

        UI_SectorWeight.Size.Y = WeightedHeight;
        UI_SectorWeightBorder.RelativePosition_V3.Y = -WeightedHeight;

        if (i < G_NbSectors - 1) { // one less dividers than sectors
            UI_SectorDiv.Size.Y = {{sector_h * 2}} + WeightedHeight + {{sector_bottom_order_h}};
        }
    }
}

/** Clear live sector data, and reset the UI. */
Void Reset(CTmRaceClientEvent Event) {
    declare Integer[] P_RunSectorMillis for Event.Player;
    declare Integer   P_RunLastCpMillis for Event.Player;
    
    P_RunSectorMillis.clear();
    P_RunLastCpMillis = 0;
    
    if (Event.Player == InputPlayer) {
        OnReset();
    }
}

/**
 * Update sector data for this player.
 * Previous data will be cleared if this is the first sector.
 *
 * If this is the input player, add the visual sector diff, and update colors.
 */
Void OnCheckpoint(CTmRaceClientEvent Event) {
    declare Integer[] P_RunSectorMillis for Event.Player;
    declare Integer   P_RunLastCpMillis for Event.Player;
    
    declare SectorIdx = Event.CheckpointInRace;
    if (SectorIdx == 0) {
        Reset(Event);
    }

    declare SectorMillis_Live = Event.RaceTime - P_RunLastCpMillis;
    declare SectorMillis_Pb   = G_PbSectorMillis[SectorIdx];
    declare SectorMillis_Top1 = G_Top1SectorMillis[SectorIdx];

    P_RunLastCpMillis = Event.RaceTime;
    P_RunSectorMillis.add(SectorMillis_Live);

    if (Event.Player != InputPlayer) {
        return;
    }

    declare TotalMillis_Live = Event.RaceTime;
    declare TotalMillis_Pb   = 0;

    for(i, 0, SectorIdx) {
        TotalMillis_Pb += G_PbSectorMillis  [i];
    }

    {% raw %}
    declare UI_ColorBar      = (Page.GetFirstChild("color_bar") as CMlQuad);
    declare UI_LiveDiffText  = (Page.GetFirstChild("""live_diff_text_{{{SectorIdx}}}""") as CMlLabel);
    {% endraw %}

    if (SectorMillis_Live > SectorMillis_Pb) {
        SetSectorColor(SectorIdx, "{{col_fail}}");
    } else {
        SetSectorColor(SectorIdx, "{{col_success}}");
    }

    if (TotalMillis_Live > TotalMillis_Pb) {
        UI_ColorBar.BgColor = ColorLib::HexToRgb("{{col_fail}}");
    } else {
        UI_ColorBar.BgColor = ColorLib::HexToRgb("{{col_success}}");
    }

    UI_LiveDiffText.Value = "$s" ^ Diff(SectorMillis_Top1, SectorMillis_Live);
}

Void OnNewTop1() {
    SetSectorWeights();
    
    declare UI_MapRecord = (Page.GetFirstChild("map_record") as CMlLabel);
    UI_MapRecord.Value = "$s🏆 " ^ TimeToText(G_Top1Millis);
}

Void OnFinish(CTmRaceClientEvent Event) {
    declare Integer[] P_RunSectorMillis for Event.Player;

    // Update PB if this player's run was better
    if (Event.Player == InputPlayer && Event.RaceTime < G_PbMillis) {
        G_PbMillis = Event.RaceTime;
        G_PbSectorMillis = P_RunSectorMillis;
    }

    // Update Top1 record if any player's run was better
    if (Event.RaceTime < G_Top1Millis) {
        G_PbIsTop1 = Event.Player == InputPlayer;
        G_Top1Millis = Event.RaceTime;
        G_Top1SectorMillis = P_RunSectorMillis;
        OnNewTop1();
    }
}

/**
 * Update the live sector data for any player,
 * and update PB & Top1 record whenever a better time was set.
 */
Void OnCheckpointOrFinish(CTmRaceClientEvent Event) {
    OnCheckpoint(Event);

    if (Event.IsEndRace) {
        OnFinish(Event);
    }
}

{% endblock decl %}
{# ============================= SCRIPT MAIN ============================= #}
{% block main %}

G_PbMillis         = {{ pb_millis }};
G_PbSectorMillis   = {{ pb_sector_millis }};
G_Top1Millis       = {{ top1_millis }};
G_Top1SectorMillis = {{ top1_sector_millis }};
G_NbSectors        = {{ nb_sectors }};

G_PbIsTop1 = True;
for(i, 0, G_NbSectors - 1) {
    assert(G_PbSectorMillis[i] >= G_Top1SectorMillis[i]);
    if (G_PbSectorMillis[i] != G_Top1SectorMillis[i]) {
        G_PbIsTop1 = False;
        break;
    }
}

declare UI_MapName = (Page.GetFirstChild("map_name") as CMlLabel);
declare UI_MapAuthor = (Page.GetFirstChild("map_author") as CMlLabel);

UI_MapName.Value = "$s" ^ Map.MapName;
UI_MapAuthor.Value = "$sby " ^ Map.AuthorLogin;

OnNewTop1();
OnReset();

{% endblock main %}
{# ============================= SCRIPT EVENTS ============================= #}
{% block race_events %}

switch (Event.Type) {
    case CTmRaceClientEvent::EType::WayPoint: {
        OnCheckpointOrFinish(Event);
    }
}

{% endblock race_events %}
