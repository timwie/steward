{% extends "common/base.xml" %}

{# ============================= MANIALINK ============================= #}
{% block manialink %}

{% let textsize_big = 5 %}
{% let textsize_small = 1 %}

{% let map_rank_str %}
{% let max_map_rank_str %}
{% let server_rank_str %}
{% let max_server_rank_str %}

{% match map_rank %}
    {% when Some with (val) %}
        {% let map_rank_str = val.to_string() %}
    {% when None %}
        {% let map_rank_str = "-".to_string() %}
{% endmatch %}

{% match max_map_rank %}
    {% when Some with (val) %}
        {% let max_map_rank_str = val.to_string() %}
        {% when None %}
        {% let max_map_rank_str = "-".to_string() %}
{% endmatch %}

{% match server_rank %}
    {% when Some with (val) %}
        {% let server_rank_str = val.to_string() %}
    {% when None %}
        {% let server_rank_str = "-".to_string() %}
{% endmatch %}

{% match max_server_rank %}
    {% when Some with (val) %}
        {% let max_server_rank_str = val.to_string() %}
        {% when None %}
        {% let max_server_rank_str = "-".to_string() %}
{% endmatch %}

<label halign="right" textfont="GameFontBlack" pos="158 88" text="$t$iSteward" textcolor="{{col_white}}" opacity="0.2"/>

<quad pos="160 -7.5" valign="bottom" halign="right" size="34 14" bgcolor="000" opacity="0.7" z-index="-100"/>
<label halign="right" textfont="GameFontSemiBold" textcolor="{{col_white}}" textemboss="1" pos="157 -4" text="Timelimit" textsize="{{textsize_small}}"/>

<quad pos="142 -13.5" halign="center" valign="center" size="36 12" bgcolor="000"/>

<quad pos="160 -19.5" halign="right" size="34 44" bgcolor="000" opacity="0.7" z-index="-100"/>

<frame pos="157 -22">
    <label id="top1"     halign="right" textfont="OswaldMono" textcolor="{{col_white}}" textemboss="1" pos="0 0" textsize="{{textsize_big}}"/>
    <label               halign="right" textfont="GameFontSemiBold" textcolor="{{col_white}}" textemboss="1" pos="0 -5.5" text="Server Record" textsize="{{textsize_small}}"/>

    <label id="pb"       halign="right" textfont="OswaldMono" textcolor="{{col_white}}" textemboss="1" pos="0 -10" textsize="{{textsize_big}}"/>
    <label               halign="right" textfont="GameFontSemiBold" textcolor="{{col_white}}" textemboss="1" pos="0 -15.5" text="Server PB" textsize="{{textsize_small}}"/>

    <label id="map-rank" halign="right" textfont="OswaldMono" textcolor="{{col_white}}" textemboss="1" pos="0 -20" text="{{map_rank_str}} / {{max_map_rank_str}}" textsize="{{textsize_big}}"/>
    <label               halign="right" textfont="GameFontSemiBold" textcolor="{{col_white}}" textemboss="1" pos="0 -25.5" text="Map Rank" textsize="{{textsize_small}}"/>

    <label               halign="right" textfont="OswaldMono" textcolor="{{col_white}}" textemboss="1"  pos="0 -30}" text="{{server_rank_str}} / {{max_server_rank_str}}" textsize="{{textsize_big}}"/>
    <label               halign="right" textfont="GameFontSemiBold" textcolor="{{col_white}}" textemboss="1" pos="0 -35.5" text="Server Rank" textsize="{{textsize_small}}"/>

</frame>

{% endblock %}
{# ============================= SCRIPT DECLARATIONS ============================= #}
{% block decl %}
{% call super() %}

declare Integer   G_PbMillis;   // this player's pb time
declare Integer   G_Top1Millis; // top1 record time

{% include "include/TimeUtils.Script.txt" %}

Void UpdateTimes() {
    assert(G_Top1Millis > 0 || G_PbMillis == 0);  // never have a PB, but not Top1
    assert(G_Top1Millis <= G_PbMillis);           // Top1 is never worse than PB

    declare UI_Pb   = (Page.GetFirstChild("pb") as CMlLabel);
    declare UI_Top1 = (Page.GetFirstChild("top1") as CMlLabel);

    if (G_PbMillis == 0) {
        UI_Pb.Value = "-";
    } else if (G_Top1Millis == G_PbMillis) {
        UI_Pb.Value = TimeToText(G_PbMillis);
        UI_Pb.TextColor = ColorLib::HexToRgb("{{col_success}}");
    } else {
        UI_Pb.Value = Diff(G_Top1Millis, G_PbMillis);
        UI_Pb.TextColor = ColorLib::HexToRgb("{{col_fail}}");
    }

    if (G_Top1Millis == 0) {
        UI_Top1.Value = "-";
    } else {
        UI_Top1.Value = "🏆" ^ TimeToText(G_Top1Millis);
    }
}

Void OnFinish(CTmRaceClientEvent Event) {
    if (Event.RaceTime <= 0) {
        return; // invalid times are set to zero
    }

    if (Event.Player == InputPlayer && Event.RaceTime < G_PbMillis) {
        G_PbMillis = Event.RaceTime;
        UpdateTimes();
    }

    if (Event.RaceTime < G_Top1Millis) {
        G_Top1Millis = Event.RaceTime;
        UpdateTimes();
    }
}

{% endblock %}
{# ============================= SCRIPT MAIN ============================= #}
{% block main %}

G_PbMillis   = {{ pb_millis  .unwrap_or_default() }};
G_Top1Millis = {{ top1_millis.unwrap_or_default() }};

UpdateTimes();

{% endblock %}
